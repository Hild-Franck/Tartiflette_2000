/**
 * Created by Knaufux on 11/23/2015.
 */

var random = require('../../../node_modules/random/lib/random');

module.exports = function(playersDB, id, attacksDB){
    var root = this;
    const DIRECTION = [
        [0,1],
        [-1,0],
        [1,0],
        [0,-1]
    ];

    const STAT = [
        [-0.1, 0, 0, 0],
        [0.2, 0, 0, 0.2],
        [0.1, -0.1, 0, 0.1],
        [0, 0, 0, 0.1]
    ];

    const X = 0;
    const Y = 1;
    this.key = -1;
    this.lastKey = 0;
    this.connected = true;
    this.id = id;
    this.attacks = attacksDB;
    this.players = playersDB;
    this.db = playersDB.get(id);
    this.onHoldAtt = {
        number: 0,
        lastAtt: 0
    };
    this.getServerData = function(){
        return {
            xPlayer: root.db.x,
            yPlayer: root.db.y,
            dirPlayer: root.db.dir,
            hlthPlayer: root.db.currHp,
            stmnPlayer: root.db.currentStm,
            xpPlayer: root.db.currXp,
            idPlayer: root.id,
            spritePlayer: root.db.sprite,
            chrgdTmPlayer: root.db.chargedTime + root.db.perks.chargedTimeMod
        }
    };
    this.updtPos = function(key){
        if(root.lastKey != 0) {
            if(key.id != -1)
                root.db.dir = key.id;
            console.log('Dir2: ' + root.db.dir);
            if(root.key != -1) {
                //root.db.dir = root.key;
                root.db.x += 0.06 * root.db.speed * DIRECTION[root.key][0] * (key.date - root.lastKey);
                root.db.y += 0.06 * root.db.speed * DIRECTION[root.key][1] * (key.date - root.lastKey);
            }

        }
        root.lastKey = key.date;
        root.key = key.id;
        root.db.key = root.key;
        root.players.update(root.db);
    };
    this.getPos = function(position, date){
        if(position == X){
            if(root.lastKey != 0 && root.key != -1) {
                return root.db.x + ( 0.06 * root.db.speed * DIRECTION[root.db.dir][X] * (date - root.lastKey));
            }
            else
                return root.db.x;
        }
        else if(position == Y){
            if(root.lastKey != 0 && root.key != -1)
                return root.db.y + ( 0.06 * root.db.speed * DIRECTION[root.db.dir][Y] * (date - root.lastKey));
            else
                return root.db.y;
        }
    };
    this.attack = function(fxArr, charged){
        if(charged && root.onHoldAtt.number == 0)
            root.onHoldAtt = {
                number: root.db.perks.charged.nbrHits,
                lastAtt: (new Date()).getTime()
            };
        if(charged && root.onHoldAtt.number > 0)
            root.onHoldAtt = {
                number: this.number - 1,
                lastAtt: (new Date()).getTime()
            };
        root.db.currentStm -= 1 + (root.db.chargedStmn * charged) * (1 + root.db.perks.charged.stmCons);

        var atckPerks = root.attacks.get(root.db.attack);
        console.log('Dir: ' + root.db.dir);
        atckPerks.x = root.getPos(X, (new Date()).getTime()) + DIRECTION[root.db.dir][X] * 30 + random.randomIntRange(-1 * atckPerks.randomizePos, atckPerks.randomizePos);
        atckPerks.y = root.getPos(Y, (new Date()).getTime()) + DIRECTION[root.db.dir][Y] * 30 + random.randomIntRange(-1 * atckPerks.randomizePos, atckPerks.randomizePos);
        atckPerks.x += (32 - atckPerks.baseAoE) / 2;
        atckPerks.y += (32 - atckPerks.baseAoE) / 2;
        atckPerks.width = atckPerks.baseAoE;
        atckPerks.height = atckPerks.baseAoE;
        atckPerks.plrDmg = root.db.strength + root.db.perks.damage + root.db.perks.charged.dmgBst * charged;
        atckPerks.creator = root.db;

        fxArr.push({
            x: atckPerks.x - (32 - atckPerks.baseAoE) / 2,
            y: atckPerks.y - (32 - atckPerks.baseAoE) / 2,
            graphic: atckPerks.graphic
        });
        root.players.update(root.db);

        return atckPerks;
    };
    this.levelUp = function(lvlArr){
        while(root.db.currXp >= root.db.maxXp){
            root.db.currXp -= root.db.maxXp;
            root.db.maxXp *= 2;
            root.db.level += 1;
            var rand = Math.floor(Math.random()*12);
            var property = Object.getOwnPropertyNames(root.db.perks)[rand];
            if(rand == 12){
                rand = Math.floor(Math.random()*4);
                var charProp = Object.getOwnPropertyNames(root.db.perks.charged)[rand];
                var i = 0;
                root.db.perks.charged.forEach(function(element){
                    element += STAT[rand][i];
                    i++;
                });
            }
            lvlArr.push(property + ' ' + charProp);
            root.db.perks[property] += 1;
            root.players.update(root.db);
        }
    };
};